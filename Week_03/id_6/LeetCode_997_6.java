

    // LeetCode 997


    
    // 信任关系是有向的，所以用有向图
    // 3个条件转化：
    // 1.小镇的法官不相信任何人 -- 法官没有向外的边（只有入度）
    // 2.每个人都信任小镇的法官 -- 其它顶点都有指向法官的边（入度等于顶点数-1）
    // 3.只有一个人同时满足属性 1 和属性 2 -- 不能出现两个法官（符合1和2的压栈，大于1个就不存在）
    // ？ 顶点个数 -- 传入数组，去重后的所有元素。 题目已给定N
    // ？ 遍历所有顶点 -- 邻接矩阵存储，遍历二维数组
    //               -- 邻接表存储，


    // [ 1. 邻接矩阵存储 ]
    public int findJudge(int N, int[][] trust) {
        int[][] graphMatix = createGraphMatix(N, trust);
        int obj = -1;
        // 遍历图，找符合条件1和2的顶点，入栈
        for (int i = 0; i < N; i++) {
            int num = 0;
            for (int j = 0; j < N; j++) {
                if (i != j){
                    //     1---2---3  有入度=1
                    // i 1-0---0---1
                    // i 2-0---0---1
                    // i 3-0---0---0
                    // 顶点i只有入度 [i][j]=0，[j][i]=1  条件1
                    if (graphMatix[i][j]==0 && graphMatix[j][i]==1){
                        // 合法顶点
                        num ++;
                    }else {
                        break;
                    }
                }
            }
            // 入度=顶点数-1  条件2
            if (num == (N - 1)){
                // 法官顶点必须唯一
                if (obj != -1){
                    return -1;
                }
                obj = i + 1;
            }
        }

        return obj;
    }

    